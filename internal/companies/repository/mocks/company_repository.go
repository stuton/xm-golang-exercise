// Code generated by mockery v2.26.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	model "github.com/stuton/xm-golang-exercise/internal/companies/model"
)

// CompanyRepository is an autogenerated mock type for the CompanyRepository type
type CompanyRepository struct {
	mock.Mock
}

// CreateCompany provides a mock function with given fields: ctx, params
func (_m *CompanyRepository) CreateCompany(ctx context.Context, params model.Company) (string, error) {
	ret := _m.Called(ctx, params)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Company) (string, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.Company) string); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.Company) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCompanyByID provides a mock function with given fields: ctx, id
func (_m *CompanyRepository) DeleteCompanyByID(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCompanyByID provides a mock function with given fields: ctx, id
func (_m *CompanyRepository) GetCompanyByID(ctx context.Context, id string) (*model.Company, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.Company
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Company, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Company); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Company)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCompany provides a mock function with given fields: ctx, params
func (_m *CompanyRepository) UpdateCompany(ctx context.Context, params model.Company) error {
	ret := _m.Called(ctx, params)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Company) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewCompanyRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewCompanyRepository creates a new instance of CompanyRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCompanyRepository(t mockConstructorTestingTNewCompanyRepository) *CompanyRepository {
	mock := &CompanyRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
